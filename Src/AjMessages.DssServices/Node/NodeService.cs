//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     DSS Runtime Version: 2.0.730.3
//     CLR Runtime Version: 2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using ajmessagesdssservices = Robotics.AjMessagesDssServices;
using AjMessages;
using System.IO;


namespace Robotics.AjMessagesDssServices.Node
{
    
    
    /// <summary>
    /// Implementation class for AjMessages Node Service
    /// </summary>
    [DisplayName("AjMessagesNode")]
    [Description("AjMessages Node Service")]
    [Contract(Contract.Identifier)]
    public class NodeService : DsspServiceBase
    {
        
        /// <summary>
        /// _state
        /// </summary>
        [ServiceState()]
        private NodeServiceState _state = new NodeServiceState();
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/ajmessages/node", AllowMultipleInstances=false)]
        private NodeServiceOperations _mainPort = new NodeServiceOperations();

        private Server server;
        
        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public NodeService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.
        }

        private void LoadServer(string config)
        {
            if (server != null)
                server.Stop();

            server = new Server();

            ChannelFactory factory = new ChannelFactory(this);
            server.ChannelFactory = factory;

            TextReader reader = new StringReader(config);
            server.Configure(reader);
        }

        public NodeServiceOperations GetServer(string address)
        {
            return ServiceForwarder<NodeServiceOperations>(new Uri(address));
        }


        [ServiceHandler(ServiceHandlerBehavior.Exclusive)]
        public virtual IEnumerator<ITask> ProcessMessageHandler(ProcessMessage processMessage)
        {
            Message msg = new Message();
            msg.Action = processMessage.Body.Action;
            msg.Body = processMessage.Body.Body;

            if (msg.Body is string)
            {
                string value = (string)msg.Body;

                if (value[0] >= '0' && value[0] <= '9')
                    msg.Body = Convert.ToInt32(value);
            }

            if (msg.Action == "Load")
                LoadServer((string)msg.Body);
            else if (server != null)
                server.Post(msg);

            processMessage.ResponsePort.Post(DefaultInsertResponseType.Instance);
            yield break;
        }
    }
}
